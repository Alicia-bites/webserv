import requests
import hashlib
import socket
import pytest
from time import time
from multiprocessing import Pool

with open("/etc/passwd", "r") as f:
    passwd = f.read()
passwd = hashlib.md5(passwd.encode()).hexdigest()

def _is_alive():
    try:
        requests.get("http://127.0.0.1:8080/")
    except requests.exceptions.ConnectionError:
        return False
    return True

@pytest.mark.quick
def test_traversal_1():
    resp_1 = requests.get("http://127.0.0.1:8080/../../../../../../etc/passwd")
    d = hashlib.md5(resp_1.text.encode()).hexdigest()
    assert d != passwd

@pytest.mark.quick
def test_traversal_2():
    resp_2 = requests.get("http://127.0.0.1:8080//etc/passwd")
    d = hashlib.md5(resp_2.text.encode()).hexdigest()
    assert d != passwd

@pytest.mark.quick
def test_traversal_3():
    resp_3 = requests.get("http://127.0.0.1:8080/%2f%2fetc/passwd")
    d = hashlib.md5(resp_3.text.encode()).hexdigest()
    assert d != passwd

@pytest.mark.quick
def test_traversal_4():
    resp_4 = requests.get("http://127.0.0.1:8080/%2f%2fetc/passwd%00")
    d = hashlib.md5(resp_4.text.encode()).hexdigest()
    assert d != passwd

@pytest.mark.quick
def test_traversal_5():
    resp_5 = requests.get("http://127.0.0.1:8080/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd")
    d = hashlib.md5(resp_5.text.encode()).hexdigest()
    assert d != passwd

# Malicious socket exploits

@pytest.mark.quick
def test_mal_socket_1():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_2():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.send(b"GET / HTTP/1.1\r")
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_3():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.sendall(b"GET/HTTP/1.1\r")
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_4():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.sendall(b"GET / HTTP/1.1 1.2\r")
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_5():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.sendall(b"GET / HTTP/1.1\r\r\r\r\r\r\r\r\r")
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_6():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.sendall(b"GET / HTTP/1.1\r\nPasunheader")
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_7():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.sendall(b"GET / HTTP/1.1\r\nHeader: test")
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_8():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 8080))
    s.sendall(b"GET / HTTP/1.1\r\nHeader: test\r\n\r\n")
    # Read the response
    data = s.recv(32768)
    s.close()
    assert _is_alive()

@pytest.mark.quick
def test_mal_socket_9():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(("127.0.0.1", 8080))
        s.sendall(b"GET / HTTP/1.1\r\nHeader: test\r\n\r\n" + b"A" * 1000000)
        # Read the response
        data = s.recv(32768)
        s.close()
    except BrokenPipeError: # Expected
        pass
    finally:
        assert _is_alive()

# Stress tests
@pytest.mark.slow
def test_stress_1():
    times = []
    for i in range(1000):
        start = time()
        requests.get("http://127.0.0.1:8080/")
        times.append(time() - start)
    assert max(times) < 1 # No request should take more than 1 second
@pytest.mark.slow
def test_stress_2():
    times = []
    for i in range(1000):
        start = time()
        requests.get("http://127.0.0.1:8080/213812783912789379812378921738921789321sdjkljhsdjhfdshjkfjshkdhjk")
        times.append(time() - start)
    assert max(times) < 0.75 # No request should take more than 0.75 seconds (404)

def stress_1(args) -> bool:
    times = []
    for i in range(250):
        start = time()
        requests.get("http://127.0.0.1:8080/")
        times.append(time() - start)
    return max(times) < 1

def stress_2(args) -> bool:
    times = []
    for i in range(250):
        start = time()
        requests.get("http://127.0.0.1:8080/213812783912789379812378921738921789321sdjkljhsdjhfdshjkfjshkdhjk")
        times.append(time() - start)
    return max(times) < 1

@pytest.mark.slow
def test_stress_1_parallel():
    with Pool(2) as p:
        p.map(stress_1, range(10))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_2_parallel():
    with Pool(2) as p:
        p.map(stress_2, range(10))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_3_parallel():
    with Pool(4) as p:
        p.map(stress_1, range(10))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_4_parallel():
    with Pool(4) as p:
        p.map(stress_2, range(10))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_5_parallel():
    with Pool(6) as p:
        p.map(stress_1, range(10))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_6_parallel():
    with Pool(6) as p:
        p.map(stress_2, range(10))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_7_parallel():
    with Pool(8) as p:
        p.map(stress_1, range(8))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_stress_8_parallel():
    with Pool(8) as p:
        p.map(stress_2, range(8))
        p.close()
        p.join()
    assert _is_alive()

@pytest.mark.slow
def test_endurance_1():
    for i in range(1000):
        try:
            requests.get("http://127.0.0.1:8080/" + str(i))
        except requests.exceptions.ConnectionError:
            print("Failed at", i)
            assert False
    assert _is_alive()
